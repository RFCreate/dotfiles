#!/usr/bin/env bash

MENU="rofi -dmenu -l 6 -i -no-show-icons"
SCREENSHOT="maim -q"

# Check if script is run with an argument
prompt="$1"
if [ -z "$prompt" ]; then
    # If not, give prompt to user
    prompt="$(printf "Select\\t[Print]\\nWindow\\t[Shift+Print]\\nScreen\\t[Alt+Print]\\n(Copy) Select\\t[Ctrl+Print]\\n(Copy) Window\\t[Ctrl+Shift+Print]\\n(Copy) Screen\\t[Ctrl+Alt+ Print]" | ${MENU} -p "Take screenshot")"
fi

# File to save screenshot
file="$HOME/Pictures/Screenshot-$(date +%Y%m%d%H%M%S).png"
# Command to save screenshot in clipboard
copy_to_clipboard="xclip -selection clipboard -t image/png"

# Send a notification either for copy or save
send_notification()
{
    case "$prompt" in
        "(Copy)"*)
            notify-send "Screenshot" "Copy to clipboard" -i edit-paste-symbolic -t 5000 -u normal
            ;;
        *)
            notify-send "Screenshot" "Saved to $file" -i folder-pictures-symbolic -t 5000 -u normal
            ;;
    esac
}

# Prevent errors from maim being masked by xclip
set -o pipefail

# Run a screenshot command based on user input
case "$prompt" in
    "Select"*)        ${SCREENSHOT} -u --select "${file}" && send_notification ;;
    "Window"*)        ${SCREENSHOT} -i "$(xdotool getactivewindow)" "${file}" && send_notification ;;
    "Screen"*)        ${SCREENSHOT} "${file}" && send_notification ;;
    "(Copy) Select"*) ${SCREENSHOT} -u --select | ${copy_to_clipboard} && send_notification ;;
    "(Copy) Window"*) ${SCREENSHOT} -i "$(xdotool getactivewindow)" | ${copy_to_clipboard} && send_notification ;;
    "(Copy) Screen"*) ${SCREENSHOT} | ${copy_to_clipboard} && send_notification ;;
    *) exit ;;
esac
