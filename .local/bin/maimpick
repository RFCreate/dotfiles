#!/usr/bin/env bash

# Check if script is run with an argument
prompt="$1"
if [ -z "$prompt" ]; then
    # Define menu launcher
    MENU="rofi -dmenu -i -l 6 -p Screenshot -no-show-icons -no-custom -theme-str 'element-text {horizontal-align: 0.5;} window {width: 400px;}'"
    # Prompt user and exit if empty
    prompt="$(printf 'Select\nWindow\nScreen\nCopy_Select\nCopy_Window\nCopy_Screen' | eval "${MENU}")"
    [ -z "$prompt" ] && exit 1
fi

SCREENSHOT_SELECT="maim -q -u --select"
SCREENSHOT_WINDOW="maim -q -u --window \$(xdotool getactivewindow)"
SCREENSHOT_SCREEN="maim -q -u"

# Define variables based on prompt
case "$prompt" in
    "Copy"*)
        CLIPBOARD="xclip -selection clipboard -t image/png"
        NOTIFICATION="notify-send 'Screenshot' 'Copied to clipboard' -i edit-paste -t 5000 -u normal"
        ;;
    *)
        FILE="$HOME/Pictures/$(date +%Y%m%d%H%M%S).png"
        [ ! -d "$(dirname "$FILE")" ] && mkdir -p "$(dirname "$FILE")"
        NOTIFICATION="notify-send 'Screenshot' 'Saved to ${FILE/$HOME/\~}' -i emblem-photos -t 5000 -u normal"
        ;;
esac

# Prevent errors from maim being masked by xclip
set -o pipefail

# Run a screenshot command based on user input
case "$prompt" in
    "Select") eval "${SCREENSHOT_SELECT} '${FILE}' && ${NOTIFICATION}" ;;
    "Window") eval "${SCREENSHOT_WINDOW} '${FILE}' && ${NOTIFICATION}" ;;
    "Screen") eval "${SCREENSHOT_SCREEN} '${FILE}' && ${NOTIFICATION}" ;;
    "Copy_Select") eval "${SCREENSHOT_SELECT} | ${CLIPBOARD} && ${NOTIFICATION}" ;;
    "Copy_Window") eval "${SCREENSHOT_WINDOW} | ${CLIPBOARD} && ${NOTIFICATION}" ;;
    "Copy_Screen") eval "${SCREENSHOT_SCREEN} | ${CLIPBOARD} && ${NOTIFICATION}" ;;
    *) exit 1 ;;
esac
